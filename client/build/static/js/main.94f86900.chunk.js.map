{"version":3,"sources":["img/climbingLogo.jpg","components/Table/ClimbingGrades.js","components/Table/Modal.js","components/Table/Table.js","components/Table/GradingSystemsDescriptions.js","App.js","components/counter/counterAPI.js","components/counter/counterSlice.js","app/store.js","serviceWorker.js","index.js"],"names":["ClimbingGrades","GradingSystemModal","props","Modal","size","centered","Header","Title","id","title","Body","body","Footer","Button","onClick","onHide","SearchBar","Search","Table","modalShow","e","setState","modalTitle","modalBody","modalHide","state","bind","Columns2","dataField","text","headerEvents","headerClasses","keyField","data","columns","search","className","searchProps","baseProps","hover","striped","condensed","rowClasses","this","show","React","Component","row","classes","level","App","Container","src","logo","alt","fetchCount","amount","Promise","resolve","setTimeout","incrementAsync","createAsyncThunk","a","response","counterSlice","createSlice","name","initialState","value","status","reducers","increment","decrement","incrementByAmount","action","payload","extraReducers","builder","addCase","pending","fulfilled","actions","store","configureStore","reducer","counter","counterReducer","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.94f86900.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/climbingLogo.808906a5.jpg\";","const ClimbingGrades = [{\n    'french': \"1\",\n    'uiaa': \"I\",\n    'yds': \"5\",\n    'britishtrad': \"Moderate\",\n    'australian': \"10\",\n    'level': \"novice\"\n}, {\n    'french': \"2\",\n    'uiaa': \"II\",\n    'yds': \"5.1 / 5.2\",\n    'britishtrad': \"D\",\n    'australian': \"11\",\n    'level': \"novice\"\n}, {\n    'french': \"3\",\n    'uiaa': \"III\",\n    'yds': \"5.3 / 5.4\",\n    'britishtrad': \"D\",\n    'australian': \"12\",\n    'level': \"novice\"\n}, {\n    'french': \"4a\",\n    'uiaa': \"IV\",\n    'yds': \"5.5\",\n    'britishtrad': \"VD\",\n    'australian': \"13\",\n    'level': \"beginner\"\n}, {\n    'french': \"4b\",\n    'uiaa': \"IV\",\n    'yds': \"5.6\",\n    'britishtrad': \"S\",\n    'australian': \"14\",\n    'level': \"beginner\"\n}];\n\nexport default ClimbingGrades","import React from 'react';\nimport { Modal,  Button } from 'react-bootstrap';\n\nexport default function GradingSystemModal(props) {\n\n    return(\n\n        <Modal\n            size=\"lg\"\n            aria-labelledby=\"contained-modal-title-vcenter\"\n            centered\n            {...props}\n        >\n            <Modal.Header>\n                <Modal.Title id=\"contained-modal-title-vcenter\">\n                    {props.title}\n                </Modal.Title>\n            </Modal.Header>\n            <Modal.Body>\n                <h4>Centered Modal</h4>\n                <p>\n                    {props.body}\n                </p>\n            </Modal.Body>\n            <Modal.Footer>\n                <Button onClick={props.onHide}>Close</Button>\n            </Modal.Footer>\n        </Modal>\n    )\n}","import React, {Fragment}  from 'react';\nimport BootstrapTable from 'react-bootstrap-table-next';\nimport ToolkitProvider, {Search} from 'react-bootstrap-table2-toolkit';\n\nimport ClimbingGrades from \"./ClimbingGrades\";\nimport * as Descriptions from './GradingSystemsDescriptions'\nimport GradingSystemModal from \"./Modal\";\nimport './Table.css'\nconst {SearchBar} = Search;\n\nexport default class Table extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            modalShow: false,\n            modalTitle: '',\n            modalBody: ''\n        }\n\n        this.modalShow = this.modalShow.bind();\n        this.modalHide = this.modalHide.bind();\n    }\n\n    modalShow = (e) => {\n\n        // switch case on where the click is originating\n        switch (e) {\n            case 'french':\n                this.setState({\n                    modalShow: true,\n                    modalTitle: 'French',\n                    modalBody: Descriptions.FrenchModalBody\n                });\n                break;\n            case 'uiaa':\n                this.setState({\n                    modalShow: true,\n                    modalTitle: 'UIAA',\n                    modalBody: Descriptions.UIAAModalBody\n                });\n                break;\n            default:\n                this.setState({\n                    modalShow: false\n                })\n        }\n    }\n\n    modalHide = () => {\n        this.setState({\n            modalShow: false,\n            modalTitle: '',\n            modalBody: ''\n        });\n    }\n\n    render() {\n\n        const Columns2 = [{\n            dataField: 'french',\n            text: 'French',\n            title: true,\n            headerEvents: {\n                onClick: () => this.modalShow('french')\n            },\n            headerClasses: 'grading-system'\n        }, {\n            dataField: 'uiaa',\n            text: 'UIAA',\n            headerEvents: {\n                onClick: () => this.modalShow('uiaa')\n            },\n            headerClasses: 'grading-system'\n        }, {\n            dataField: 'yds',\n            text: 'Yosemite Decimal System',\n            headerClasses: 'grading-system',\n            headerEvents: {\n                onClick: () => this.modalShow('uiaa')\n            },\n        }, {\n            dataField: 'britishtrad',\n            text: 'British Trad',\n            headerClasses: 'grading-system'\n        }, {\n            dataField: 'australian',\n            text: 'Australian',\n            headerClasses: 'grading-system'\n        }\n        ];\n\n        return (\n            <Fragment>\n                <ToolkitProvider\n                    keyField=\"australian\"\n                    data={ClimbingGrades}\n                    columns={Columns2}\n                    search\n                >\n                    {\n                        props => (\n                            <div>\n                                <div className='p-1'>\n                                    <SearchBar {...props.searchProps} />\n                                </div>\n                                <div className=\"p-1\">\n                                    <BootstrapTable\n                                        {...props.baseProps}\n                                        hover\n                                        striped\n                                        condensed\n                                        rowClasses={rowClasses}\n                                    />\n                                </div>\n                            </div>\n                        )\n                    }\n                </ToolkitProvider>\n\n                <GradingSystemModal\n                    onHide={this.modalHide}\n                    show={this.state.modalShow}\n                    title={this.state.modalTitle}\n                    body={this.state.modalBody}\n                />\n            </Fragment>\n        )\n    }\n}\n\nconst rowClasses = ( row ) => {\n    let classes;\n\n    switch (row.level) {\n        case 'novice':\n            classes = 'novice'\n            break;\n        case 'beginner':\n            classes = 'beginner'\n            break;\n        case 'intermediate':\n            classes = 'intermediate'\n            break;\n        case 'advanced':\n            classes = 'advanced'\n            break;\n        default:\n            classes = ''\n    }\n\n    return classes;\n}","export const FrenchModalBody = \"Here's some text about the French grading system\"\nexport const UIAAModalBody = \"Here's some text about the UIAA grading system\"","import React from 'react';\nimport {Container} from \"react-bootstrap\";\nimport logo from './img/climbingLogo.jpg';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Table from \"./components/Table/Table\";\nimport './App.css';\n\nfunction App() {\n    return (\n        <Container className=\"App\">\n            <header className=\"App-header\">\n                <img src={logo} className=\"App-logo\" alt=\"logo\"/>\n                Convert That Climb\n            </header>\n            <body className=\"App-body\">\n                <Table/>\n            </body>\n        </Container>\n    );\n}\n\nexport default App;\n","// A mock function to mimic making an async request for data\nexport function fetchCount(amount = 1) {\n  return new Promise((resolve) =>\n    setTimeout(() => resolve({ data: amount }), 500)\n  );\n}\n","import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport { fetchCount } from './counterAPI';\n\nconst initialState = {\n  value: 0,\n  status: 'idle',\n};\n\n// The function below is called a thunk and allows us to perform async logic. It\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\n// will call the thunk with the `dispatch` function as the first argument. Async\n// code can then be executed and other actions can be dispatched. Thunks are\n// typically used to make async requests.\nexport const incrementAsync = createAsyncThunk(\n  'counter/fetchCount',\n  async (amount) => {\n    const response = await fetchCount(amount);\n    // The value we return becomes the `fulfilled` action payload\n    return response.data;\n  }\n);\n\nexport const counterSlice = createSlice({\n  name: 'counter',\n  initialState,\n  // The `reducers` field lets us define reducers and generate associated actions\n  reducers: {\n    increment: (state) => {\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n      // doesn't actually mutate the state because it uses the Immer library,\n      // which detects changes to a \"draft state\" and produces a brand new\n      // immutable state based off those changes\n      state.value += 1;\n    },\n    decrement: (state) => {\n      state.value -= 1;\n    },\n    // Use the PayloadAction type to declare the contents of `action.payload`\n    incrementByAmount: (state, action) => {\n      state.value += action.payload;\n    },\n  },\n  // The `extraReducers` field lets the slice handle actions defined elsewhere,\n  // including actions generated by createAsyncThunk or in other slices.\n  extraReducers: (builder) => {\n    builder\n      .addCase(incrementAsync.pending, (state) => {\n        state.status = 'loading';\n      })\n      .addCase(incrementAsync.fulfilled, (state, action) => {\n        state.status = 'idle';\n        state.value += action.payload;\n      });\n  },\n});\n\nexport const { increment, decrement, incrementByAmount } = counterSlice.actions;\n\n// The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`\nexport const selectCount = (state) => state.counter.value;\n\n// We can also write thunks by hand, which may contain both sync and async logic.\n// Here's an example of conditionally dispatching actions based on current state.\nexport const incrementIfOdd = (amount) => (dispatch, getState) => {\n  const currentValue = selectCount(getState());\n  if (currentValue % 2 === 1) {\n    dispatch(incrementByAmount(amount));\n  }\n};\n\nexport default counterSlice.reducer;\n","import { configureStore } from '@reduxjs/toolkit';\nimport counterReducer from '../components/counter/counterSlice';\n\nexport const store = configureStore({\n  reducer: {\n    counter: counterReducer,\n  },\n});\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { store } from './app/store';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\n// import '../node_modules/bootstrap/dist/css/bootstrap.min.css';\nimport 'react-bootstrap-table-next/dist/react-bootstrap-table2.min.css';\n\nReactDOM.render(\n    <Provider store={store}>\n      <App />\n    </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
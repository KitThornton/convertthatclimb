{"version":3,"sources":["img/climbingLogo.jpg","actions/actionTypes.js","actions/repositoryActions.js","components/modal/Modal.js","components/table/Columns.js","components/table/Table.js","components/modal/GradingSystemsDescriptions.js","App.js","serviceWorker.js","reducers/converterReducer.js","index.js"],"names":["GET_CLIMBING_GRADES","UPDATE_MODAL","getClimbingGrades","dispatch","fetch","then","res","json","result","type","ActionTypes","data","error","console","log","updateModal","props","GradingSystemModal","Modal","size","centered","Header","Title","id","title","Body","body","Footer","Button","onClick","onHide","GradingSystems","dataField","text","SearchBar","Search","Table","modalShow","e","onUpdateModal","modalTitle","modalBody","modalHide","state","grades","bind","this","onGetClimbingGrades","columns","map","item","headerEvents","headerClasses","keyField","search","className","searchProps","srText","placeholder","delay","baseProps","hover","striped","condensed","rowClasses","show","React","Component","row","level","connect","repositoryActions","App","Container","Row","Col","src","logo","alt","Boolean","window","location","hostname","match","initialState","executeGetClimbingGradesSuccess","action","executeUpdateModalSuccess","reducer","store","createStore","converterReducer","applyMiddleware","thunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.25aa4570.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/climbingLogo.808906a5.jpg\";","export const GET_CLIMBING_GRADES = 'GET_CLIMBING_GRADES';\nexport const UPDATE_MODAL = 'TOGGLE_MODAL_VISIBILITY'","import * as ActionTypes from './actionTypes'\nconst baseUrl = 'https://convertthatclimb.herokuapp.com/';\n\nconst submitGetClimbingGradesSuccess = (data) => {\n    return {\n        type: ActionTypes.GET_CLIMBING_GRADES,\n        data: data\n    }\n}\n\nconst submitUpdateModalSuccess = (data)  => {\n    return {\n        type: ActionTypes.UPDATE_MODAL,\n        data: data\n    }\n}\n\nexport const getClimbingGrades = () => {\n    return (dispatch) => {\n\n        fetch(baseUrl)\n            .then(res => res.json())\n            .then(\n                (result) => {\n                    dispatch(submitGetClimbingGradesSuccess(result))\n                },\n                (error) => {\n                    console.log(error);\n                });\n    }\n}\n\nexport const updateModal = (props) => {\n\n    return (dispatch) => {\n        dispatch(submitUpdateModalSuccess(props))\n    }\n}","import React from 'react';\nimport { Modal,  Button } from 'react-bootstrap';\n\nexport default function GradingSystemModal(props) {\n\n    return(\n\n        <Modal\n            size=\"lg\"\n            aria-labelledby=\"contained-modal-title-vcenter\"\n            centered\n            {...props}\n        >\n            <Modal.Header>\n                <Modal.Title id=\"contained-modal-title-vcenter\">\n                    {props.title}\n                </Modal.Title>\n            </Modal.Header>\n            <Modal.Body>\n                <p>\n                    {props.body}\n                </p>\n            </Modal.Body>\n            <Modal.Footer>\n                <Button onClick={props.onHide}>Close</Button>\n            </Modal.Footer>\n        </Modal>\n    )\n}","export const GradingSystems = [{\n    dataField: 'french',\n    text: 'French'\n}, {\n    dataField: 'uiaa',\n    text: 'UIAA'\n}, {\n    dataField: 'yds',\n    text: 'Yosemite Decimal System'\n}, {\n    dataField: 'britishtrad',\n    text: 'British Trad'\n}, {\n    dataField: 'australian',\n    text: 'Australian'\n}\n];","import React, {Fragment}  from 'react';\nimport BootstrapTable from 'react-bootstrap-table-next';\nimport ToolkitProvider, {Search} from 'react-bootstrap-table2-toolkit';\nimport {connect} from \"react-redux\";\n\nimport * as repositoryActions from '../../actions/repositoryActions';\nimport * as Descriptions from '../modal/GradingSystemsDescriptions'\nimport GradingSystemModal from \"../modal/Modal\";\nimport './Table.css'\nimport {GradingSystems} from \"./Columns\";\n\nconst {SearchBar} = Search;\n\nclass Table extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            modalShow: false,\n            modalTitle: '',\n            modalBody: '',\n            grades: []\n        }\n\n        this.modalShow = this.modalShow.bind();\n        this.modalHide = this.modalHide.bind();\n    }\n\n    componentDidMount() {\n        this.props.onGetClimbingGrades();\n    }\n\n    modalShow = (e) => {\n\n        // switch case on where the click is originating\n        let title, body;\n\n        switch (e) {\n            case 'french':\n                title = 'French ss';\n                body = Descriptions.FrenchModalBody\n                break;\n            case 'uiaa':\n                title = 'UIAA';\n                body = Descriptions.UIAAModalBody\n                break;\n            case 'yds':\n                title = 'Yosemite Decimal System';\n                body = Descriptions.YDSModalBody\n                break;\n            case 'britishtrad':\n                title = 'British Traditional';\n                body = Descriptions.BritishTradModalBody;\n                break;\n            case 'australian':\n                    title = 'Australian';\n                    body = Descriptions.AustralianModalBody;\n                break;\n        }\n\n        this.props.onUpdateModal({\n            modalShow: true,\n            modalTitle: title,\n            modalBody: body\n        })\n    }\n\n    modalHide = () => {\n        this.props.onUpdateModal({\n            modalShow: false,\n            modalTitle: '',\n            modalBody: ''\n        });\n    }\n\n    render() {\n\n        const columns = GradingSystems.map(item => ({...item,\n            headerEvents: {onClick: () => this.modalShow(item.dataField)},\n            headerClasses: 'grading-system'\n            })\n        )\n\n        return (\n            <Fragment>\n                <ToolkitProvider\n                    keyField=\"australian\"\n                    data={this.props.grades}\n                    columns={columns}\n                    search\n                >\n                    {\n                        props => (\n                            <div>\n                                <div className='p-1'>\n                                    <SearchBar\n                                        {...props.searchProps}\n                                        srText=\"\"\n                                        placeholder={\"Search for a grade...\"}\n                                        delay={200}\n                                    />\n                                </div>\n                                <div className=\"p-1\">\n                                    <BootstrapTable\n                                        {...props.baseProps}\n                                        hover\n                                        striped\n                                        condensed\n                                        rowClasses={rowClasses}\n                                    />\n                                </div>\n                            </div>\n                        )\n                    }\n                </ToolkitProvider>\n\n                <GradingSystemModal\n                    onHide={this.modalHide}\n                    show={this.props.modalShow}\n                    title={this.props.modalTitle}\n                    body={this.props.modalBody}\n                />\n            </Fragment>\n        )\n    }\n}\n\nconst rowClasses = ( row ) => { return row.level }\n\nconst mapStateToProps = (state) => {\n    return {\n        modalShow: state.modalShow,\n        modalTitle: state.modalTitle,\n        modalBody: state.modalBody,\n        grades: state.grades\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => ({\n    onGetClimbingGrades: () => dispatch(repositoryActions.getClimbingGrades()),\n    onUpdateModal: (props) => dispatch(repositoryActions.updateModal(props))\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Table)","export const FrenchModalBody = \"Here's some text about the French grading system\"\nexport const UIAAModalBody = \"Here's some text about the UIAA grading system\"\nexport const YDSModalBody = \"Here's some text about the Yosemite Decimal grading system\"\nexport const BritishTradModalBody = \"Here's some text about the British Traditional grading system\"\nexport const AustralianModalBody = \"Here's some text about the Australian grading system\"","import React from 'react';\nimport {Container, Row, Col} from \"react-bootstrap\";\nimport logo from './img/climbingLogo.jpg';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Table from \"./components/table/Table\";\nimport './App.css';\n\nfunction App() {\n    return (\n        <Container className=\"App\">\n            <div className=\"App-header\">\n                <Row>\n                    <Col>\n                        <img src={logo} className=\"App-logo\" alt=\"logo\"/>\n                    </Col>\n                    <Col>\n                        Convert That Climb\n                    </Col>\n                </Row>\n            </div>\n            <body className=\"App-body\">\n                <Table/>\n            </body>\n        </Container>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import * as ActionTypes from '../actions/actionTypes';\n\nconst initialState = {\n    modalShow: false,\n    modalTitle: '',\n    modalBody: '',\n    grades: []\n}\n\nconst executeGetClimbingGradesSuccess = (state, action) => {\n    return {\n        ...state,\n        grades: action.data\n    }\n}\n\nconst executeUpdateModalSuccess = (state, action) => {\n    return {\n        ...state,\n        modalShow: action.data.modalShow,\n        modalTitle: action.data.modalTitle,\n        modalBody: action.data.modalBody\n    }\n}\n\nconst reducer = (state = initialState, action) => {\n    switch (action.type) {\n        case ActionTypes.GET_CLIMBING_GRADES:\n            return executeGetClimbingGradesSuccess(state, action)\n        case ActionTypes.UPDATE_MODAL:\n            return executeUpdateModalSuccess(state, action)\n        default:\n            return state;\n    }\n}\n\nexport default reducer","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport {Provider} from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\nimport {createStore, applyMiddleware} from \"redux\";\nimport converterReducer from \"./reducers/converterReducer\";\nimport thunk from 'redux-thunk';\n\n// import '../node_modules/bootstrap/dist/css/bootstrap.min.css';\n// import 'react-bootstrap-table-next/dist/react-bootstrap-table2.min.css';\n\nconst store = createStore(converterReducer, applyMiddleware(thunk))\n\nReactDOM.render(\n    <Provider store={store}>\n        <App/>\n    </Provider>,\n    document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}